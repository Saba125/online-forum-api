// This is your Prisma schema file,
// learn more about it in the docs: https://pris.ly/d/prisma-schema

// Looking for ways to speed up your queries, or scale easily with your serverless or edge functions?
// Try Prisma Accelerate: https://pris.ly/cli/accelerate-init
enum Roles {
  Admin
  Moderator
  User
}

generator client {
  provider = "prisma-client-js"
}

datasource db {
  provider = "postgresql"
  url      = env("DATABASE_URL")
}

model User {
  id       Int       @id @default(autoincrement())
  email    String    @unique
  role     Roles     @default(User)
  password String
  Thread   Thread[]
  Post     Post[]
  Comment  Comment[]
  Like     Like[]

  @@map("users")
}

model Category {
  id        Int      @id @default(autoincrement())
  name      String
  createdAt DateTime @default(now())
  updatedAt DateTime @updatedAt
  Thread    Thread[]

  @@map("categories")
}

model Thread {
  id         Int      @id @default(autoincrement())
  title      String
  content    String
  categoryId Int
  category   Category @relation(fields: [categoryId], references: [id])
  authorId   Int
  author     User     @relation(fields: [authorId], references: [id])
  createdAt  DateTime @default(now())
  updatedAt  DateTime @updatedAt
  Post       Post[]
  Like       Like[]

  @@map("threads")
}

model Post {
  id        Int       @id @default(autoincrement())
  content   String
  threadId  Int
  authorId  Int
  createdAt DateTime  @default(now())
  updatedAt DateTime  @updatedAt
  author    User      @relation(fields: [authorId], references: [id])
  thread    Thread    @relation(fields: [threadId], references: [id])
  Comment   Comment[]
  Like      Like[]

  @@map("posts")
}

model Comment {
  id        Int      @id @default(autoincrement())
  content   String
  authorId  Int
  postId    Int
  createdAt DateTime @default(now())
  updatedAt DateTime @updatedAt
  post      Post     @relation(fields: [postId], references: [id])
  author    User     @relation(fields: [authorId], references: [id])

  @@map("comments")
}

model Like {
  id        Int      @id @default(autoincrement())
  authorId  Int
  postId    Int?
  threadId  Int?
  createdAt DateTime @default(now())
  author    User     @relation(fields: [authorId], references: [id])
  thread    Thread?  @relation(fields: [threadId], references: [id])
  post      Post?    @relation(fields: [postId], references: [id])

  @@unique([authorId, postId])
  @@unique([authorId, threadId])
  @@map("likes")
}
